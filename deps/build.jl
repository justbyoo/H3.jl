using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libh3"], :libh3),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/wookay/H3Builder/releases/download/v3.6.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/H3.v3.6.2.aarch64-linux-gnu.tar.gz", "71abff1dc13e751af6d4746961a6b5234a75f803ea8a16d7ae36598fe90ed6ce"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/H3.v3.6.2.aarch64-linux-musl.tar.gz", "4a02dc1b112557edcafd9b8b0c7617bcc9aa17e967eb8754199aaa0a5a610cfe"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/H3.v3.6.2.arm-linux-gnueabihf.tar.gz", "643f6df780836b77f765154477b68f25e05057ea307cf4fa645634bb5f5a8331"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/H3.v3.6.2.arm-linux-musleabihf.tar.gz", "b8b415190f53f3193e5c1554b86d2a628709040ef57542280792c3dbfdfafba1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/H3.v3.6.2.i686-linux-gnu.tar.gz", "6354e7f127286376e540b759cd3c430ec993d704ff43c259a2ec538507c22ea6"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/H3.v3.6.2.i686-linux-musl.tar.gz", "a627b6c770eabe5acaeac8cb760f92182f04fea36e55b653e994f6b959ec89a7"),
    Windows(:i686) => ("$bin_prefix/H3.v3.6.2.i686-w64-mingw32.tar.gz", "fdfbe66e2ef57566e91544711017bffd67afcf5001bd5e235a20fc4e72309852"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/H3.v3.6.2.powerpc64le-linux-gnu.tar.gz", "ba9fc1e788643aa0bf8a6d71dc7ace9477b7cf50d4a8e26ab2aef41c7e369270"),
    MacOS(:x86_64) => ("$bin_prefix/H3.v3.6.2.x86_64-apple-darwin14.tar.gz", "576e48c569a40f4d63b01b05c7e297344525d23c5a2d210a0dbe11bf8aed02ae"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/H3.v3.6.2.x86_64-linux-gnu.tar.gz", "04c86f5874e0c2d858223387dec69906d3e8b7c7e6c3554a80e24492e5d03953"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/H3.v3.6.2.x86_64-linux-musl.tar.gz", "066cb4e071a06bc9e148c258a48bd4e6cf870d4c8dacb83fbece06e2d97827cc"),
    FreeBSD(:x86_64) => ("$bin_prefix/H3.v3.6.2.x86_64-unknown-freebsd11.1.tar.gz", "63bd62da57499a597180d41bd71299f1df9183a367f50416934e7766bae00d57"),
    Windows(:x86_64) => ("$bin_prefix/H3.v3.6.2.x86_64-w64-mingw32.tar.gz", "8eb8798624e01afdd17d18dba49985cd6174a6be4534e8d19c900deedc4bab17"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
